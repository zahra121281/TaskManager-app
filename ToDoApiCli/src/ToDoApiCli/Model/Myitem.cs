/*
 * webAPI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ToDoApiCli.Client.OpenAPIDateConverter;

namespace ToDoApiCli.Model
{
    /// <summary>
    /// Myitem
    /// </summary>
    [DataContract(Name = "myitem")]
    public partial class Myitem : IEquatable<Myitem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Myitem" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="myitemId">myitemId.</param>
        /// <param name="dateToDone">dateToDone.</param>
        /// <param name="isDone">isDone.</param>
        public Myitem(string description = default(string), string myitemId = default(string), DateTime dateToDone = default(DateTime), bool isDone = default(bool))
        {
            this.Description = description;
            this.MyitemId = myitemId;
            this.DateToDone = dateToDone;
            this.IsDone = isDone;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets MyitemId
        /// </summary>
        [DataMember(Name = "myitemId", EmitDefaultValue = true)]
        public string MyitemId { get; set; }

        /// <summary>
        /// Gets or Sets DateToDone
        /// </summary>
        [DataMember(Name = "dateToDone", EmitDefaultValue = false)]
        public DateTime DateToDone { get; set; }

        /// <summary>
        /// Gets or Sets IsDone
        /// </summary>
        [DataMember(Name = "isDone", EmitDefaultValue = true)]
        public bool IsDone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            // sb.Append("class Myitem {\n");
            // sb.Append("  Description: ").Append(Description).Append("\n");
            // sb.Append("  MyitemId: ").Append(MyitemId).Append("\n");
            // sb.Append("  DateToDone: ").Append(DateToDone).Append("\n");
            // sb.Append("  IsDone: ").Append(IsDone).Append("\n");
            // sb.Append("}\n");
            sb.Append($"Id: {MyitemId} Description: {Description} Date: {DateToDone} ") ; 
            if(IsDone )
                sb.Append("Is Checked") ; 
            else
            {
                sb.Append("Not Checked") ; 
            }
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Myitem);
        }

        /// <summary>
        /// Returns true if Myitem instances are equal
        /// </summary>
        /// <param name="input">Instance of Myitem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Myitem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.MyitemId == input.MyitemId ||
                    (this.MyitemId != null &&
                    this.MyitemId.Equals(input.MyitemId))
                ) && 
                (
                    this.DateToDone == input.DateToDone ||
                    (this.DateToDone != null &&
                    this.DateToDone.Equals(input.DateToDone))
                ) && 
                (
                    this.IsDone == input.IsDone ||
                    this.IsDone.Equals(input.IsDone)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.MyitemId != null)
                {
                    hashCode = (hashCode * 59) + this.MyitemId.GetHashCode();
                }
                if (this.DateToDone != null)
                {
                    hashCode = (hashCode * 59) + this.DateToDone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // MyitemId (string) maxLength
            if (this.MyitemId != null && this.MyitemId.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MyitemId, length must be less than 5.", new [] { "MyitemId" });
            }

            // MyitemId (string) minLength
            if (this.MyitemId != null && this.MyitemId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MyitemId, length must be greater than 1.", new [] { "MyitemId" });
            }

            yield break;
        }
    }

}
